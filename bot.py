import os
import asyncio
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from dotenv import load_dotenv
from openai import AsyncOpenAI
from anthropic import Anthropic
from personalities import CEO, CMO, CTO, CFO, CISO, CDO, CLO, CRO
from datetime import datetime, timedelta
from collections import defaultdict
from news import NewsHandler
import httpx
import re
import signal

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')
XAI_API_KEY = os.getenv('XAI_API_KEY')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
chat_states = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: {'mode': 'ask'/'chat'/'team', 'timestamp': datetime}}
chat_tasks = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: task}
current_dialogs = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: role}
dialog_histories = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: {role: [{'user': msg, 'assistant': resp}]}}
user_languages = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: 'ru'/'en'}
dialog_depths = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: depth}
discussion_cycles = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: {'messages_count': int, 'roles_count': int}}
discussion_history = []  # —Ñ–æ—Ä–º–∞—Ç: [{'role': role, 'response': response}, ...]
team_roles = {}  # —Ñ–æ—Ä–º–∞—Ç: {chat_id: [roles]}

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
current_role = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODE_NORMAL = 'normal'
MODE_ASK = 'ask'
MODE_CHAT = 'chat'
MODE_TEAM = 'team'
MODE_NEWS = 'news'
MODE_TIMEOUT = 5
DEFAULT_HISTORY_DEPTH = 5
MAX_HISTORY_DEPTH = 10

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
CALLBACK_CONTINUE = 'continue_discussion'
CALLBACK_END = 'end_discussion'

# –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
PERSONALITIES = {
    'CEO': CEO,
    'CMO': CMO,
    'CTO': CTO,
    'CFO': CFO,
    'CISO': CISO,
    'CDO': CDO,
    'CLO': CLO,
    'CRO': CRO
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
TEMPERATURES = {
    'CEO': 0.7,    # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    'CFO': 0.3,    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ, —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    'CTO': 0.5,    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–µ, –Ω–æ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
    'CMO': 0.9,    # –°–∞–º—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    'CISO': 0.3,   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    'CDO': 0.6,    # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö
    'CLO': 0.2,    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    'CRO': 0.4     # –û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∏—Å–∫–∞–º
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
ROLE_EMOJI = {
    'CEO': 'üë®‚Äçüíº',
    'CMO': 'üì¢',
    'CTO': 'üë®‚Äçüíª',
    'CFO': 'üí∞',
    'CISO': 'üõ°Ô∏è',
    'CDO': 'üìä',
    'CLO': '‚öñÔ∏è',
    'CRO': 'üéØ'
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
MESSAGES = {
    'en': {
        'welcome': """üëã Welcome to AGI Hedge Fund!

Our team:
üë®‚Äçüíº CEO - Chief Executive Officer
üì¢ CMO - Chief Marketing Officer
üë®‚Äçüíª CTO - Chief Technology Officer
üí∞ CFO - Chief Financial Officer
üõ°Ô∏è CISO - Chief Information Security Officer
üìä CDO - Chief Data Officer
‚öñÔ∏è CLO - Chief Legal Officer
üéØ CRO - Chief Risk Officer

Commands:
/chat <topic> - start group discussion
/ask <role> <question> - ask specific manager
/team <roles,comma,separated> <topic> - discussion with selected team
/stop - stop discussion
/language - change language
/history - show dialog history
/clear - clear dialog history
/depth <number> - set history depth (1-50)
/export - export dialog history
/news - switch to news mode

You can also just send a message, and CEO will respond to it!""",
        'lang_changed': "Language changed to English",
        'choose_lang': "Choose your language:",
        'topic_request': "Please specify the topic for discussion!\nExample: /chat investment strategy",
        'discussion_started': "üìã Starting discussion on topic: {}",
        'discussion_already': "Discussion is already in progress! Use /stop to end current discussion.",
        'discussion_stopped': "üõë Discussion stopped!\nUse /chat to start new discussion.",
        'no_discussion': "No active discussion.\nUse /chat to start new one.",
        'role_question': "Please specify role and question!\nExample: /ask CEO how to increase profit?",
        'unknown_role': "Unknown role! Available roles: {}",
        'team_format': "Please specify roles and topic!\nExample: /team CEO,CTO,CFO discuss new trading strategy",
        'team_started': "üìã Starting discussion on topic: {}\nParticipants:\n{}",
        'unknown_command': """‚ùå Unknown command: {}

Available commands:
/chat <topic> - start group discussion
/ask <role> <question> - ask specific manager
/team <roles,comma,separated> <topic> - discussion with selected team
/stop - stop discussion
/language - change language
/history - show dialog history
/clear - clear dialog history
/depth <number> - set history depth (1-50)
/export - export dialog history
/start - show welcome message
/news - switch to news mode

You can also just send a message, and CEO will respond to it!""",
        'history_empty': "No dialog history with {}",
        'history_cleared': "Dialog history with {} has been cleared",
        'depth_set': "History depth set to {} messages",
        'depth_invalid': "Please specify a number between 1 and 50",
        'export_empty': "No dialog history to export",
        'current_depth': "Current history depth: {} messages",
        'usage_stats': "Usage Statistics",
        'search_no_keywords': "Please provide keywords to search for.",
        'search_no_results': "No results found for the given keywords.",
        'search_results': "Search Results",
        'filter_no_dates': "Please provide start and end dates in the format YYYY-MM-DD.",
        'filter_invalid_dates': "Invalid date format. Please use YYYY-MM-DD.",
        'filter_no_results': "No results found for the given date range.",
        'filter_results': "Filtered Results",
    },
    'ru': {
        'welcome': """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AGI Hedge Fund!

–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:
üë®‚Äçüíº CEO - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
üì¢ CMO - –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É
üë®‚Äçüíª CTO - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
üí∞ CFO - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
üõ°Ô∏è CISO - –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
üìä CDO - –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º
‚öñÔ∏è CLO - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
üéØ CRO - –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Ä–∏—Å–∫–∞–º

–ö–æ–º–∞–Ω–¥—ã:
/chat <—Ç–µ–º–∞> - –Ω–∞—á–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
/ask <—Ä–æ–ª—å> <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
/team <—Ä–æ–ª–∏,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é> <—Ç–µ–º–∞> - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
/language - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/depth <—á–∏—Å–ª–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª—É–±–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ (1-50)
/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
/news - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ CEO –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ!""",
        'lang_changed': "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'topic_request': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /chat –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
        'discussion_started': "üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã: {}",
        'discussion_already': "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.",
        'discussion_stopped': "üõë –û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.",
        'no_discussion': "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ.",
        'role_question': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –∏ –≤–æ–ø—Ä–æ—Å!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /ask CEO –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?",
        'unknown_role': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {}",
        'team_format': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∏ —Ç–µ–º—É!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /team CEO,CTO,CFO –æ–±—Å—É–¥–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        'team_started': "üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã: {}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{}",
        'unknown_command': """‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/chat <—Ç–µ–º–∞> - –Ω–∞—á–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
/ask <—Ä–æ–ª—å> <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
/team <—Ä–æ–ª–∏,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é> <—Ç–µ–º–∞> - –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
/language - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/depth <—á–∏—Å–ª–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª—É–±–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ (1-50)
/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
/start - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/news - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ CEO –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ!""",
        'history_empty': "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å {}",
        'history_cleared': "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å {} –æ—á–∏—â–µ–Ω–∞",
        'depth_set': "–ì–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–π",
        'depth_invalid': "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50",
        'export_empty': "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        'current_depth': "–¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {} —Å–æ–æ–±—â–µ–Ω–∏–π",
        'usage_stats': "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        'search_no_keywords': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        'search_no_results': "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        'search_results': "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
        'filter_no_dates': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.",
        'filter_invalid_dates': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.",
        'filter_no_results': "–ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        'filter_results': "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
    }
}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
usage_stats = {
    'total_messages': 0,
    'role_distribution': defaultdict(int),
    'hour_distribution': defaultdict(int)
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
def update_usage_stats(chat_id, role):
    usage_stats['total_messages'] += 1
    usage_stats['role_distribution'][role] += 1
    current_hour = datetime.now().hour
    usage_stats['hour_distribution'][current_hour] += 1

def get_message(chat_id: int, key: str) -> str:
    # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lang = user_languages.get(chat_id, 'ru')
    return MESSAGES[lang][key]

async def get_chatgpt_response(prompt, personality, lang='ru', selected_roles=None, dialog_history=None, chat_id=None):
    try:
        system_prompt = personality['system_prompt']
        if selected_roles:
            team_info = f"\n–í –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ: {', '.join(selected_roles)}" if lang == 'ru' else f"\nOnly following roles participate in discussion: {', '.join(selected_roles)}"
            system_prompt += team_info

        messages = []
        if dialog_history:
            depth = dialog_depths.get(chat_id, DEFAULT_HISTORY_DEPTH)
            for entry in dialog_history[-depth:]:
                messages.extend([
                    {"role": "user", "content": entry['user']},
                    {"role": "assistant", "content": entry['assistant']}
                ])
        
        if personality['name'] == 'CMO':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API xAI –¥–ª—è CMO
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "https://api.x.ai/v1/chat/completions",
                    headers={
                        "Content-Type": "application/json",
                        "Authorization": f"Bearer {XAI_API_KEY}"
                    },
                    json={
                        "messages": [
                            {"role": "system", "content": system_prompt},
                            *messages,
                            {"role": "user", "content": prompt}
                        ],
                        "model": "grok-2-vision-1212",
                        "stream": False,
                        "temperature": TEMPERATURES.get(personality['name'], 0.9)
                    }
                )
                response_data = response.json()
                print("Response Data:", response_data)  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                content = response_data['choices'][0]['message']['content']
                # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
                formatted_content = re.sub(r'\*\*', '', content)
                return formatted_content
        elif personality['name'] == 'CFO':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API Gemini –¥–ª—è CFO
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}",
                    headers={
                        "Content-Type": "application/json"
                    },
                    json={
                        "contents": [{
                            "parts": [
                                {"text": system_prompt},
                                *[{"text": msg['content']} for msg in messages],
                                {"text": prompt}
                            ]
                        }]
                    }
                )
                response_data = response.json()
                print("Response Data:", response_data)  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                if 'error' in response_data:
                    error_message = response_data['error']['message']
                    return f"–û—à–∏–±–∫–∞ API: {error_message}"

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                content = response_data['candidates'][0]['content']['parts'][0]['text']
                
                # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
                formatted_content = re.sub(r'\*\*', '', content)
                
                # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                formatted_content = re.sub(r'\n{3,}', '\n\n', formatted_content)
                
                return formatted_content
        elif personality['name'] == 'CTO':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Anthropic –¥–ª—è CTO
            client = Anthropic(api_key=ANTHROPIC_API_KEY)
            message = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1000,
                temperature=TEMPERATURES.get(personality['name'], 0.7),
                system=system_prompt,
                messages=[
                    *messages,
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if isinstance(message.content, list):
                response = message.content[0].text
            else:
                response = message.content

            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            if isinstance(response, str):
                response = response.replace('[TextBlock(citations=None, text=', '')
                response = response.replace(", type='text')]", '')
                response = response.replace('\\n', '\n')
            
            return response
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI
            client = AsyncOpenAI(api_key=OPENAI_API_KEY)
            system_prompt = f"{system_prompt}\nRespond in {'Russian' if lang == 'ru' else 'English'}."
            all_messages = [
                {"role": "system", "content": system_prompt},
                *messages,
                {"role": "user", "content": prompt}
            ]
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=all_messages,
                max_tokens=1000,
                temperature=TEMPERATURES.get(personality['name'], 0.7)
            )
            return response.choices[0].message.content
    except Exception as e:
        print("Exception occurred:", str(e))  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        import traceback
        traceback.print_exc()  # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏
        return f"–û—à–∏–±–∫–∞: {str(e)}" if lang == 'ru' else f"Error: {str(e)}"

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≥–¥–µ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–ª–∏–µ–Ω—Ç–∞
news_handler = NewsHandler(openai_client=client)

async def check_mode_timeout(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç —Ä–µ–∂–∏–º–∞"""
    if chat_id in chat_states:
        if datetime.now() - chat_states[chat_id]['timestamp'] > timedelta(minutes=MODE_TIMEOUT):
            await reset_chat_mode(chat_id)
            return True
    return False

async def reset_chat_mode(chat_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞"""
    if chat_id in chat_states:
        del chat_states[chat_id]

async def set_chat_mode(chat_id: int, mode: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞"""
    chat_states[chat_id] = {
        'mode': mode,
        'timestamp': datetime.now()
    }

async def chat_loop(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str, roles=None):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    global discussion_history, discussion_cycles
    discussion_history = []
    
    if roles is None:
        roles = list(PERSONALITIES.keys())
    
    discussion_cycles[chat_id] = {'messages_count': 0, 'roles_count': len(roles)}
    
    try:
        while chat_id in chat_tasks:
            for role in roles:
                if chat_id not in chat_tasks:
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
                if discussion_history:
                    context_prompt = f"–¢–µ–º–∞: {topic}\n\n–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:\n" if lang == 'ru' else f"Topic: {topic}\n\nPrevious responses:\n"
                    context_prompt += "\n".join([f"{msg['role']}: {msg['response']}" for msg in discussion_history[-3:]])
                    prompt = context_prompt + ("\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:" if lang == 'ru' else "\n\nYour response considering previous messages:")
                else:
                    prompt = f"–¢–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {topic}" if lang == 'ru' else f"Discussion topic: {topic}"
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
                print(f"Requesting response for {role} about {topic}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                response = await get_chatgpt_response(prompt, PERSONALITIES[role], lang, roles, dialog_histories.get(chat_id, {}).get(role, []), chat_id)
                print(f"Got response from {role}: {response[:50]}...")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                
                if chat_id not in chat_tasks:
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                discussion_history.append({'role': role, 'response': response})
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                emoji = ROLE_EMOJI.get(role, 'üë§')
                message = f"{emoji} {role}:\n{response}"
                print(f"Sending message: {message[:50]}...")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(message)
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.message.reply_text(message)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                discussion_cycles[chat_id]['messages_count'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
                if discussion_cycles[chat_id]['messages_count'] >= 1 * len(roles):
                    print("Showing continue buttons...")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                    await show_continue_buttons(update, context)
                    return
                
                await asyncio.sleep(2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            if discussion_history:
                topic = f"–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã. –†–∞–∑–≤–µ–π –ø–æ—Å–ª–µ–¥–Ω—é—é –º—ã—Å–ª—å: {discussion_history[-1]['response']}" if lang == 'ru' else f"Continue the discussion, considering previous responses. Develop the last thought: {discussion_history[-1]['response']}"
    
    except Exception as e:
        print(f"Error in chat_loop: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if chat_id in chat_tasks:
            del chat_tasks[chat_id]
        error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ." if lang == 'ru' else "An error occurred. Discussion stopped."
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(error_msg)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(error_msg)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_text = update.message.text
    lang = user_languages.get(chat_id, 'ru')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Ä–µ–∂–∏–º–∞
    await check_mode_timeout(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    current_mode = chat_states.get(chat_id, {}).get('mode', MODE_NORMAL)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if current_mode == MODE_NEWS:
        await news_handler.handle_message(update, context)
        return
    elif current_mode == MODE_ASK:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å –∏ –≤–æ–ø—Ä–æ—Å
        parts = message_text.split(maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text(get_message(chat_id, 'role_question'))
            return
        role, question = parts
        role = role.upper()
        if role not in PERSONALITIES:
            await update.message.reply_text(get_message(chat_id, 'unknown_role').format(', '.join(PERSONALITIES.keys())))
            return
        await process_ask(update, context, role, question)
        await reset_chat_mode(chat_id)
        return
    elif current_mode == MODE_CHAT:
        await process_chat(update, context, message_text)
        await reset_chat_mode(chat_id)
        return
    elif current_mode == MODE_TEAM:
        parts = message_text.split(maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text(get_message(chat_id, 'team_format'))
            return
        roles, topic = parts
        await process_team(update, context, roles, topic)
        await reset_chat_mode(chat_id)
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–µ—Å–ª–∏ –Ω–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    if chat_id in chat_tasks:
        return

    print(f"User ID: {chat_id}")  # –í—ã–≤–æ–¥–∏—Ç ID –≤ –∫–æ–Ω—Å–æ–ª—å

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ä–æ–ª—å –∏–ª–∏ CEO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    role = current_dialogs.get(chat_id, 'CEO')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ä–æ–ª–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if chat_id not in dialog_histories:
        dialog_histories[chat_id] = {}
    if role not in dialog_histories[chat_id]:
        dialog_histories[chat_id][role] = []

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_history = dialog_histories[chat_id][role]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    response = await get_chatgpt_response(
        message_text, 
        PERSONALITIES[role], 
        lang, 
        None, 
        dialog_history,
        chat_id
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    dialog_histories[chat_id][role].append({
        'user': message_text,
        'assistant': response
    })
    
    emoji = ROLE_EMOJI.get(role, 'üë§')
    await update.message.reply_text(f"{emoji} {role}:\n{response}")

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='lang_ru'),
            InlineKeyboardButton("English üá¨üáß", callback_data='lang_en')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('lang_'):
        lang = query.data.split('_')[1]
        user_languages[query.message.chat_id] = lang
        await query.message.reply_text(MESSAGES[lang]['lang_changed'])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.edit_reply_markup(reply_markup=None)
    elif query.data.startswith('switch_'):
        role = query.data.split('_')[1]
        chat_id = query.message.chat_id
        current_dialogs[chat_id] = role
        emoji = ROLE_EMOJI.get(role, 'üë§')
        await query.message.reply_text(
            get_message(chat_id, 'speaker_changed').format(emoji, role)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.edit_reply_markup(reply_markup=None)
    elif query.data == CALLBACK_CONTINUE:
        chat_id = query.message.chat_id
        if chat_id in chat_tasks:
            discussion_cycles[chat_id]['messages_count'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            await query.message.edit_text("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            if discussion_history:
                last_topic = f"–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã. –†–∞–∑–≤–µ–π –ø–æ—Å–ª–µ–¥–Ω—é—é –º—ã—Å–ª—å: {discussion_history[-1]['response']}"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ /team
                roles = team_roles.get(chat_id, list(PERSONALITIES.keys()))
                # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è chat_loop
                fake_message = query.message
                fake_update = Update(update.update_id, message=fake_message)
                task = asyncio.create_task(chat_loop(fake_update, context, last_topic, roles))
                chat_tasks[chat_id] = task
    elif query.data == CALLBACK_END:
        chat_id = query.message.chat_id
        if chat_id in chat_tasks:
            del chat_tasks[chat_id]
        if chat_id in discussion_cycles:
            del discussion_cycles[chat_id]
        if chat_id in team_roles:
            del team_roles[chat_id]
        await reset_chat_mode(chat_id)
        await query.message.edit_text("–ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–ù–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ—Ç–≤–µ—á–∞—Ç—å –°–ï–û.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏
    if chat_id in chat_tasks:
        chat_tasks[chat_id].cancel()
        del chat_tasks[chat_id]
    if chat_id in current_dialogs:
        del current_dialogs[chat_id]
    if chat_id in dialog_histories:
        del dialog_histories[chat_id]
    if chat_id in chat_states:
        del chat_states[chat_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(get_message(chat_id, 'welcome'))

async def process_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    if chat_id in chat_tasks:
        await update.message.reply_text(get_message(chat_id, 'discussion_already'))
        return

    print(f"Starting chat discussion about: {topic}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    await update.message.reply_text(get_message(chat_id, 'discussion_started').format(topic))
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    task = asyncio.create_task(chat_loop(update, context, topic))
    chat_tasks[chat_id] = task
    
    try:
        await task
    except Exception as e:
        print(f"Error in process_chat: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if chat_id in chat_tasks:
            del chat_tasks[chat_id]

async def process_team(update: Update, context: ContextTypes.DEFAULT_TYPE, roles_str: str, topic: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã team"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    roles = [role.strip().upper() for role in roles_str.split(',')]
    invalid_roles = [role for role in roles if role not in PERSONALITIES]
    if invalid_roles:
        await update.message.reply_text(get_message(chat_id, 'unknown_role').format(', '.join(PERSONALITIES.keys())))
        return
    
    if chat_id in chat_tasks:
        await update.message.reply_text(get_message(chat_id, 'discussion_already'))
        return
    
    print(f"Starting team discussion about: {topic} with roles: {roles}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    role_list = ', '.join([f"{ROLE_EMOJI[role]} {role}" for role in roles])
    await update.message.reply_text(get_message(chat_id, 'team_started').format(topic, role_list))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    team_roles[chat_id] = roles
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    task = asyncio.create_task(chat_loop(update, context, topic, roles))
    chat_tasks[chat_id] = task
    
    try:
        await task
    except Exception as e:
        print(f"Error in process_team: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if chat_id in chat_tasks:
            del chat_tasks[chat_id]

async def ask_specific(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    await set_chat_mode(chat_id, MODE_ASK)
    prompt = "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nCEO –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?" if lang == 'ru' else \
             "Enter role and your question in format:\nCEO how to increase profit?"
    await update.message.reply_text(prompt)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in chat_tasks:
        chat_tasks[chat_id].cancel()
        del chat_tasks[chat_id]
    if chat_id in current_dialogs:
        del current_dialogs[chat_id]
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    if chat_id in dialog_histories:
        del dialog_histories[chat_id]
    await update.message.reply_text(get_message(chat_id, 'discussion_stopped'))

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    command = update.message.text
    await update.message.reply_text(get_message(chat_id, 'unknown_command').format(command))

def get_role_keyboard():
    keyboard = []
    row = []
    for i, (role, data) in enumerate(PERSONALITIES.items()):
        emoji = ROLE_EMOJI.get(role, 'üë§')
        button = InlineKeyboardButton(f"{emoji} {role}", callback_data=f"switch_{role}")
        row.append(button)
        if len(row) == 2 or i == len(PERSONALITIES) - 1:
            keyboard.append(row)
            row = []
    return InlineKeyboardMarkup(keyboard)

async def switch_speaker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π —Å —ç–º–æ–¥–∑–∏
    roles_text = "\n".join([f"{ROLE_EMOJI.get(role, 'üë§')} {role}" for role in PERSONALITIES.keys()])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        get_message(chat_id, 'available_roles').format(roles_text),
        reply_markup=get_role_keyboard()
    )

async def current_speaker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_role = current_dialogs.get(chat_id, 'CEO')
    emoji = ROLE_EMOJI.get(current_role, 'üë§')
    await update.message.reply_text(
        get_message(chat_id, 'current_speaker').format(emoji, current_role)
    )

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    role = current_dialogs.get(chat_id, 'CEO')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    lang = user_languages.get(chat_id, 'ru')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    if chat_id not in dialog_histories:
        await update.message.reply_text(get_message(chat_id, 'history_empty').format(role))
        return
    
    if role not in dialog_histories[chat_id] or not dialog_histories[chat_id][role]:
        await update.message.reply_text(get_message(chat_id, 'history_empty').format(role))
        return
    
    history = dialog_histories[chat_id][role]
    depth = dialog_depths.get(chat_id, DEFAULT_HISTORY_DEPTH)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_text = f"üí¨ {role} - {get_message(chat_id, 'current_depth').format(depth)}\n\n"
    for i, entry in enumerate(history[-depth:], 1):
        history_text += f"üó£ User: {entry['user']}\n"
        history_text += f"üë§ {role}: {entry['assistant']}\n\n"
    
    await update.message.reply_text(history_text)

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    role = current_dialogs.get(chat_id, 'CEO')
    
    if chat_id in dialog_histories and role in dialog_histories[chat_id]:
        dialog_histories[chat_id][role] = []
    
    await update.message.reply_text(get_message(chat_id, 'history_cleared').format(role))

async def set_depth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(get_message(chat_id, 'depth_invalid'))
        return
    
    depth = int(context.args[0])
    if depth < 1 or depth > MAX_HISTORY_DEPTH:
        await update.message.reply_text(get_message(chat_id, 'depth_invalid'))
        return
    
    dialog_depths[chat_id] = depth
    await update.message.reply_text(get_message(chat_id, 'depth_set').format(depth))

async def export_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    if chat_id not in dialog_histories or not dialog_histories[chat_id]:
        await update.message.reply_text(get_message(chat_id, 'export_empty'))
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_text = "=== Dialog History Export ===\n\n"
    for role, history in dialog_histories[chat_id].items():
        if history:
            export_text += f"=== {role} ===\n"
            for entry in history:
                export_text += f"User: {entry['user']}\n"
                export_text += f"{role}: {entry['assistant']}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(f"history_export_{chat_id}.txt", "w", encoding="utf-8") as f:
        f.write(export_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(f"history_export_{chat_id}.txt", "rb") as f:
        await update.message.reply_document(
            document=f,
            filename=f"dialog_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(f"history_export_{chat_id}.txt")

async def show_usage_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    stats_text = f"üìä {get_message(chat_id, 'usage_stats')}\n"
    stats_text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {usage_stats['total_messages']}\n"
    stats_text += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:\n"
    for role, count in usage_stats['role_distribution'].items():
        stats_text += f"{ROLE_EMOJI.get(role, 'üë§')} {role}: {count}\n"
    stats_text += "–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã:\n"
    for hour, count in sorted(usage_stats['hour_distribution'].items()):
        stats_text += f"{hour}:00 - {hour}:59: {count}\n"
    
    await update.message.reply_text(stats_text)

async def search_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    if not context.args:
        await update.message.reply_text(get_message(chat_id, 'search_no_keywords'))
        return
    
    keywords = ' '.join(context.args).lower()
    results = []
    
    for role, history in dialog_histories.get(chat_id, {}).items():
        for entry in history:
            if keywords in entry['user'].lower() or keywords in entry['assistant'].lower():
                results.append((role, entry))
    
    if not results:
        await update.message.reply_text(get_message(chat_id, 'search_no_results'))
        return
    
    search_text = f"üîç {get_message(chat_id, 'search_results')}\n"
    for role, entry in results:
        search_text += f"{ROLE_EMOJI.get(role, 'üë§')} {role}:\n"
        search_text += f"üó£ User: {entry['user']}\n"
        search_text += f"üë§ {role}: {entry['assistant']}\n\n"
    
    await update.message.reply_text(search_text)

async def filter_history_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    if len(context.args) < 2:
        await update.message.reply_text(get_message(chat_id, 'filter_no_dates'))
        return
    
    try:
        start_date = datetime.strptime(context.args[0], '%Y-%m-%d')
        end_date = datetime.strptime(context.args[1], '%Y-%m-%d')
    except ValueError:
        await update.message.reply_text(get_message(chat_id, 'filter_invalid_dates'))
        return
    
    filtered_results = []
    
    for role, history in dialog_histories.get(chat_id, {}).items():
        for entry in history:
            entry_date = datetime.strptime(entry['date'], '%Y-%m-%d')
            if start_date <= entry_date <= end_date:
                filtered_results.append((role, entry))
    
    if not filtered_results:
        await update.message.reply_text(get_message(chat_id, 'filter_no_results'))
        return
    
    filter_text = f"üìÖ {get_message(chat_id, 'filter_results')}\n"
    for role, entry in filtered_results:
        filter_text += f"{ROLE_EMOJI.get(role, 'üë§')} {role}:\n"
        filter_text += f"üó£ User: {entry['user']}\n"
        filter_text += f"üë§ {role}: {entry['assistant']}\n\n"
    
    await update.message.reply_text(filter_text)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [123456789, 987654321, 189234871]  # –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—à ID

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if chat_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
    stats_text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {usage_stats['total_messages']}\n"
    stats_text += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:\n"
    for role, count in usage_stats['role_distribution'].items():
        stats_text += f"{ROLE_EMOJI.get(role, 'üë§')} {role}: {count}\n"
    stats_text += "–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã:\n"
    for hour, count in sorted(usage_stats['hour_distribution'].items()):
        stats_text += f"{hour}:00 - {hour}:59: {count}\n"
    
    await update.message.reply_text(stats_text)

# –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /news
async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–æ–≤–æ—Å—Ç–µ–π
    chat_states[chat_id] = {'mode': MODE_NEWS, 'timestamp': datetime.now()}
    news_handler.start_news_mode(chat_id)
    print(f"–†–µ–∂–∏–º –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    message = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ —Å–≤—è–∑–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤." if lang == 'ru' else \
              "Analysts are ready. Send news to receive trading signals."
    await update.message.reply_text(message)

async def exit_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    current_mode = chat_states.get(chat_id, {}).get('mode', MODE_NORMAL)
    await reset_chat_mode(chat_id)
    
    message = "–†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω" if lang == 'ru' else "Mode reset"
    await update.message.reply_text(message)

async def process_ask(update: Update, context: ContextTypes.DEFAULT_TYPE, role: str, question: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    if role not in PERSONALITIES:
        await update.message.reply_text(get_message(chat_id, 'unknown_role').format(', '.join(PERSONALITIES.keys())))
        return

    response = await get_chatgpt_response(
        question,
        PERSONALITIES[role],
        lang,
        None,
        dialog_histories.get(chat_id, {}).get(role, []),
        chat_id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    if chat_id not in dialog_histories:
        dialog_histories[chat_id] = {}
    if role not in dialog_histories[chat_id]:
        dialog_histories[chat_id][role] = []
    
    dialog_histories[chat_id][role].append({
        'user': question,
        'assistant': response
    })

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    current_dialogs[chat_id] = role

    emoji = ROLE_EMOJI.get(role, 'üë§')
    await update.message.reply_text(f"{emoji} {role}:\n{response}")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    await set_chat_mode(chat_id, MODE_CHAT)
    prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!" if lang == 'ru' else \
             "Please specify the topic for discussion!"
    await update.message.reply_text(prompt)

async def team_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /team"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    await set_chat_mode(chat_id, MODE_TEAM)
    prompt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∏ —Ç–µ–º—É!\n–ù–∞–ø—Ä–∏–º–µ—Ä: CEO,CTO,CFO –æ–±—Å—É–¥–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" if lang == 'ru' else \
             "Please specify roles and topic!\nExample: CEO,CTO,CFO discuss new trading strategy"
    await update.message.reply_text(prompt)

async def show_continue_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
    chat_id = update.effective_chat.id
    lang = user_languages.get(chat_id, 'ru')
    
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ" if lang == 'ru' else "Continue discussion", 
                callback_data=CALLBACK_CONTINUE
            ),
            InlineKeyboardButton(
                "–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ" if lang == 'ru' else "End discussion", 
                callback_data=CALLBACK_END
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = ("–¶–∏–∫–ª –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?" if lang == 'ru' 
              else "Discussion cycle completed. Would you like to continue?")
    
    await update.message.reply_text(message, reply_markup=reply_markup)

def main():
    stop_event = asyncio.Event()

    def handle_exit(*args):
        stop_event.set()

    signal.signal(signal.SIGINT, handle_exit)
    signal.signal(signal.SIGTERM, handle_exit)

    while not stop_event.is_set():
        try:
            application = Application.builder().token(TELEGRAM_TOKEN).build()

            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CommandHandler("chat", chat))
            application.add_handler(CommandHandler("ask", ask_specific))
            application.add_handler(CommandHandler("team", team_chat))
            application.add_handler(CommandHandler("stop", stop))
            application.add_handler(CommandHandler("language", language))
            application.add_handler(CommandHandler("news", news_command))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /news
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—É—â–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
            application.add_handler(CommandHandler("switch", switch_speaker))
            application.add_handler(CommandHandler("current", current_speaker))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(button))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
            application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO & ~filters.COMMAND, message_handler))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            application.add_handler(CommandHandler("history", show_history))
            application.add_handler(CommandHandler("clear", clear_history))
            application.add_handler(CommandHandler("depth", set_depth))
            application.add_handler(CommandHandler("export", export_history))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            application.add_handler(CommandHandler("stats", show_usage_stats))
            application.add_handler(CommandHandler("search", search_history))
            application.add_handler(CommandHandler("filter", filter_history_by_date))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            application.add_handler(CommandHandler("admin_stats", admin_stats))
            
            # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            application.add_handler(CommandHandler("exit", exit_mode))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
            application.add_handler(MessageHandler(filters.COMMAND, unknown))

            print("üöÄ –ë–æ—Ç AGI Hedge Fund –∑–∞–ø—É—â–µ–Ω...")
            application.run_polling()
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            import traceback
            traceback.print_exc()
            asyncio.run(asyncio.sleep(5))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è

if __name__ == '__main__':
    main()


